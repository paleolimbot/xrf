// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// discreteFilter
NumericVector discreteFilter(NumericVector x, NumericVector f, bool scale, bool tails);
RcppExport SEXP _xrftools_discreteFilter(SEXP xSEXP, SEXP fSEXP, SEXP scaleSEXP, SEXP tailsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type tails(tailsSEXP);
    rcpp_result_gen = Rcpp::wrap(discreteFilter(x, f, scale, tails));
    return rcpp_result_gen;
END_RCPP
}
// discreteFilterIterative
NumericVector discreteFilterIterative(NumericVector x, NumericVector f, int iterations, double epsilon);
RcppExport SEXP _xrftools_discreteFilterIterative(SEXP xSEXP, SEXP fSEXP, SEXP iterationsSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(discreteFilterIterative(x, f, iterations, epsilon));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_xrftools_discreteFilter", (DL_FUNC) &_xrftools_discreteFilter, 4},
    {"_xrftools_discreteFilterIterative", (DL_FUNC) &_xrftools_discreteFilterIterative, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_xrftools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
